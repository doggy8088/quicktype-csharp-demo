// Generated by https://quicktype.io

namespace QuickType
{
    using System;
    using System.Collections.Generic;
    using System.Text.Json;
    using System.Text.Json.Serialization;

    using System.Globalization;

    public partial class TopLevel
    {
        [JsonPropertyName("$schema")]
        public string Schema { get; set; }

        [JsonPropertyName("version")]
        public long Version { get; set; }

        [JsonPropertyName("newProjectRoot")]
        public string NewProjectRoot { get; set; }

        [JsonPropertyName("projects")]
        public Projects Projects { get; set; }

        [JsonPropertyName("defaultProject")]
        public string DefaultProject { get; set; }
    }

    public partial class Projects
    {
        [JsonPropertyName("demo1")]
        public Demo1 Demo1 { get; set; }
    }

    public partial class Demo1
    {
        [JsonPropertyName("projectType")]
        public string ProjectType { get; set; }

        [JsonPropertyName("schematics")]
        public Schematics Schematics { get; set; }

        [JsonPropertyName("root")]
        public string Root { get; set; }

        [JsonPropertyName("sourceRoot")]
        public string SourceRoot { get; set; }

        [JsonPropertyName("prefix")]
        public string Prefix { get; set; }

        [JsonPropertyName("architect")]
        public Architect Architect { get; set; }
    }

    public partial class Architect
    {
        [JsonPropertyName("build")]
        public Build Build { get; set; }

        [JsonPropertyName("serve")]
        public Serve Serve { get; set; }

        [JsonPropertyName("extract-i18n")]
        public ExtractI18N ExtractI18N { get; set; }

        [JsonPropertyName("test")]
        public Test Test { get; set; }
    }

    public partial class Build
    {
        [JsonPropertyName("builder")]
        public string Builder { get; set; }

        [JsonPropertyName("options")]
        public BuildOptions Options { get; set; }

        [JsonPropertyName("configurations")]
        public BuildConfigurations Configurations { get; set; }

        [JsonPropertyName("defaultConfiguration")]
        public string DefaultConfiguration { get; set; }
    }

    public partial class BuildConfigurations
    {
        [JsonPropertyName("production")]
        public Production Production { get; set; }

        [JsonPropertyName("development")]
        public Development Development { get; set; }
    }

    public partial class Development
    {
        [JsonPropertyName("buildOptimizer")]
        public bool BuildOptimizer { get; set; }

        [JsonPropertyName("optimization")]
        public bool Optimization { get; set; }

        [JsonPropertyName("vendorChunk")]
        public bool VendorChunk { get; set; }

        [JsonPropertyName("extractLicenses")]
        public bool ExtractLicenses { get; set; }

        [JsonPropertyName("sourceMap")]
        public bool SourceMap { get; set; }

        [JsonPropertyName("namedChunks")]
        public bool NamedChunks { get; set; }
    }

    public partial class Production
    {
        [JsonPropertyName("budgets")]
        public Budget[] Budgets { get; set; }

        [JsonPropertyName("fileReplacements")]
        public FileReplacement[] FileReplacements { get; set; }

        [JsonPropertyName("outputHashing")]
        public string OutputHashing { get; set; }
    }

    public partial class Budget
    {
        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("maximumWarning")]
        public string MaximumWarning { get; set; }

        [JsonPropertyName("maximumError")]
        public string MaximumError { get; set; }
    }

    public partial class FileReplacement
    {
        [JsonPropertyName("replace")]
        public string Replace { get; set; }

        [JsonPropertyName("with")]
        public string With { get; set; }
    }

    public partial class BuildOptions
    {
        [JsonPropertyName("outputPath")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string OutputPath { get; set; }

        [JsonPropertyName("index")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string Index { get; set; }

        [JsonPropertyName("main")]
        public string Main { get; set; }

        [JsonPropertyName("polyfills")]
        public string Polyfills { get; set; }

        [JsonPropertyName("tsConfig")]
        public string TsConfig { get; set; }

        [JsonPropertyName("assets")]
        public string[] Assets { get; set; }

        [JsonPropertyName("styles")]
        public string[] Styles { get; set; }

        [JsonPropertyName("scripts")]
        public object[] Scripts { get; set; }

        [JsonPropertyName("karmaConfig")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string KarmaConfig { get; set; }
    }

    public partial class ExtractI18N
    {
        [JsonPropertyName("builder")]
        public string Builder { get; set; }

        [JsonPropertyName("options")]
        public DevelopmentClass Options { get; set; }
    }

    public partial class DevelopmentClass
    {
        [JsonPropertyName("browserTarget")]
        public string BrowserTarget { get; set; }
    }

    public partial class Serve
    {
        [JsonPropertyName("builder")]
        public string Builder { get; set; }

        [JsonPropertyName("configurations")]
        public ServeConfigurations Configurations { get; set; }

        [JsonPropertyName("defaultConfiguration")]
        public string DefaultConfiguration { get; set; }
    }

    public partial class ServeConfigurations
    {
        [JsonPropertyName("production")]
        public DevelopmentClass Production { get; set; }

        [JsonPropertyName("development")]
        public DevelopmentClass Development { get; set; }
    }

    public partial class Test
    {
        [JsonPropertyName("builder")]
        public string Builder { get; set; }

        [JsonPropertyName("options")]
        public BuildOptions Options { get; set; }
    }

    public partial class Schematics
    {
        [JsonPropertyName("@schematics/angular:application")]
        public SchematicsAngularApplication SchematicsAngularApplication { get; set; }
    }

    public partial class SchematicsAngularApplication
    {
        [JsonPropertyName("strict")]
        public bool Strict { get; set; }
    }

    public partial class TopLevel
    {
        public static TopLevel FromJson(string json) => JsonSerializer.Deserialize<TopLevel>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TopLevel self) => JsonSerializer.Serialize(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.Web)
        {
            // MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            // DateParseHandling = DateParseHandling.None,
            // Converters =
            // {
            //     new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            // },
        };
    }
}
